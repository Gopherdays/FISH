//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""Reel"",
            ""id"": ""66f0053b-ec20-4960-978a-844c05336e0c"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""b3e8f563-9f57-4ab6-adf5-80d16fc2bae0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""63fbd7d3-d3f0-49f4-bbd4-5b4e21c693bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""f78ffe52-ebc6-4b60-bcab-568d34605b96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""8409f007-b4de-49e5-a0e8-0060ee62dff8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""1d1262c2-41d6-4bb9-b924-fd0b4d407c2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""55ecb160-de70-49df-a946-96d7bbb932af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""587c6673-0cba-4915-9da8-722c82f84d4c"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2e74865-f963-4104-b68b-b0ace122a6e2"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9abab48-87e0-45cf-83f7-2341738ce978"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d9aaab2-9b51-4246-9590-d7bb43a425bf"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e046d2a8-8586-4f39-8bae-3923e427c99b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f43c4005-6f79-46bd-b995-8567f4aeb5a7"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Xbox"",
            ""bindingGroup"": ""Xbox"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Reel
        m_Reel = asset.FindActionMap("Reel", throwIfNotFound: true);
        m_Reel_Up = m_Reel.FindAction("Up", throwIfNotFound: true);
        m_Reel_Down = m_Reel.FindAction("Down", throwIfNotFound: true);
        m_Reel_Left = m_Reel.FindAction("Left", throwIfNotFound: true);
        m_Reel_Right = m_Reel.FindAction("Right", throwIfNotFound: true);
        m_Reel_A = m_Reel.FindAction("A", throwIfNotFound: true);
        m_Reel_B = m_Reel.FindAction("B", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Reel
    private readonly InputActionMap m_Reel;
    private IReelActions m_ReelActionsCallbackInterface;
    private readonly InputAction m_Reel_Up;
    private readonly InputAction m_Reel_Down;
    private readonly InputAction m_Reel_Left;
    private readonly InputAction m_Reel_Right;
    private readonly InputAction m_Reel_A;
    private readonly InputAction m_Reel_B;
    public struct ReelActions
    {
        private @InputActions m_Wrapper;
        public ReelActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Reel_Up;
        public InputAction @Down => m_Wrapper.m_Reel_Down;
        public InputAction @Left => m_Wrapper.m_Reel_Left;
        public InputAction @Right => m_Wrapper.m_Reel_Right;
        public InputAction @A => m_Wrapper.m_Reel_A;
        public InputAction @B => m_Wrapper.m_Reel_B;
        public InputActionMap Get() { return m_Wrapper.m_Reel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ReelActions set) { return set.Get(); }
        public void SetCallbacks(IReelActions instance)
        {
            if (m_Wrapper.m_ReelActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_ReelActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_ReelActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_ReelActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_ReelActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_ReelActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_ReelActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_ReelActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_ReelActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_ReelActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_ReelActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_ReelActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_ReelActionsCallbackInterface.OnRight;
                @A.started -= m_Wrapper.m_ReelActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_ReelActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_ReelActionsCallbackInterface.OnA;
                @B.started -= m_Wrapper.m_ReelActionsCallbackInterface.OnB;
                @B.performed -= m_Wrapper.m_ReelActionsCallbackInterface.OnB;
                @B.canceled -= m_Wrapper.m_ReelActionsCallbackInterface.OnB;
            }
            m_Wrapper.m_ReelActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @B.started += instance.OnB;
                @B.performed += instance.OnB;
                @B.canceled += instance.OnB;
            }
        }
    }
    public ReelActions @Reel => new ReelActions(this);
    private int m_XboxSchemeIndex = -1;
    public InputControlScheme XboxScheme
    {
        get
        {
            if (m_XboxSchemeIndex == -1) m_XboxSchemeIndex = asset.FindControlSchemeIndex("Xbox");
            return asset.controlSchemes[m_XboxSchemeIndex];
        }
    }
    public interface IReelActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
    }
}
